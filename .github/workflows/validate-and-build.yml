name: Validate YAML and Generate HTML

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'awesome_3dgs_papers.yaml'

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests urllib3

    - name: Validate YAML entries
      run: |
        python - <<EOF
        import yaml
        import sys
        import requests
        import time
        from urllib3.util.retry import Retry
        from requests.adapters import HTTPAdapter

        # Configure requests for better reliability
        session = requests.Session()
        retries = Retry(
            total=3,  # number of retries
            backoff_factor=1,  # wait 1, 2, 4 seconds between retries
            status_forcelist=[408, 429, 500, 502, 503, 504],  # retry on these status codes
            allowed_methods=["HEAD", "GET"]  # allow retries for these methods
        )
        adapter = HTTPAdapter(max_retries=retries)
        session.mount('http://', adapter)
        session.mount('https://', adapter)

        # Custom headers to mimic browser
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
        }

        # Load allowed tags
        allowed_tags = [
          "2DGS", "360 degree", "Acceleration", "Antialiasing", "Autonomous Driving", 
          "Avatar", "Classic Work", "Code", "Compression", "Deblurring", "Densification",
          "Diffusion", "Distributed", "Dynamic", "Editing", "Event Camera", "Feed-Forward", 
          "GAN", "Inpainting", "In the Wild", "Language Embedding", "Large-Scale", "Lidar", 
          "Medicine", "Meshing", "Misc", "Monocular", "Perspective-correct", "Object Detection", 
          "Optimization", "Physics", "Point Cloud", "Poses", "Project", "Ray Tracing", 
          "Rendering", "Relight", "Review", "Robotics", "Segmentation", "SLAM", "Sparse", 
          "Stereo", "Style Transfer", "Texturing", "Transformer", "Uncertainty", "Video", 
          "Virtual Reality", "World Generation"
        ]

        def validate_url(url, required=False):
            """Validate URL with fallback to GET if HEAD fails"""
            if not url:
                return None if not required else "URL is missing or empty"
                
            try:
                # First try HEAD request
                response = session.head(
                    url, 
                    headers=headers,
                    timeout=30,  # increased timeout
                    allow_redirects=True
                )
                
                # If HEAD fails, try GET
                if response.status_code in [405, 400, 403]:
                    response = session.get(
                        url,
                        headers=headers,
                        timeout=30,
                        allow_redirects=True,
                        stream=True  # Don't download entire content
                    )
                    response.close()  # Close connection immediately
                
                valid_codes = {200, 301, 302, 303, 307, 308}
                if response.status_code not in valid_codes:
                    return f"URL returns {response.status_code}"
                    
                return None
                    
            except requests.Timeout:
                return "URL timed out"
            except requests.RequestException as e:
                return f"Error accessing URL: {str(e)}"
            except Exception as e:
                return f"Unexpected error: {str(e)}"

        # Load and validate YAML
        with open("awesome_3dgs_papers.yaml", 'r') as file:
            entries = yaml.safe_load(file)

        errors = []
        url_fields = {
            'paper': True,      # Required
            'project_page': False,  # Optional
            'code': False,      # Optional
            'video': False      # Optional
        }

        for entry in entries:
            # Basic validation
            if not entry.get('id'):
                errors.append("Entry missing ID")
                continue

            # Tags validation
            tags = entry.get('tags', [])
            if not tags:
                errors.append(f"Entry {entry['id']}: No tags provided")
            else:
                invalid_tags = [tag for tag in tags 
                              if not tag.startswith('Year ') and tag not in allowed_tags]
                if invalid_tags:
                    errors.append(f"Entry {entry['id']}: Invalid tags: {invalid_tags}")
                
                non_year_tags = [tag for tag in tags if not tag.startswith('Year ')]
                if not non_year_tags:
                    errors.append(f"Entry {entry['id']}: Must have at least one non-Year tag")

            # URL validation
            for field, required in url_fields.items():
                value = entry.get(field)
                if value or required:
                    error = validate_url(value, required)
                    if error:
                        errors.append(f"Entry {entry['id']}: {field} {error}")
                    # Add delay between requests to avoid rate limiting
                    time.sleep(1)

        if errors:
            print("Validation errors found:")
            for error in errors:
                print(error)
            sys.exit(1)
        else:
            print("âœ… All validations passed!")
        EOF

    - name: Generate HTML
      run: python src/generate_all.py

    - name: Commit and push if changed
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git fetch origin
        git checkout ${{ github.head_ref }}
        git add index.html
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update index.html"
          git push origin ${{ github.head_ref }}
        fi